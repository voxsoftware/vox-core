var $mod$165 = core.VW.Ecma2015.Utils.module(require('./constructor'));
var proto = $mod$165.Moment.prototype;
var $mod$166 = core.VW.Ecma2015.Utils.module(require('./add-subtract'));
var $mod$167 = core.VW.Ecma2015.Utils.module(require('./calendar'));
var $mod$168 = core.VW.Ecma2015.Utils.module(require('./clone'));
var $mod$169 = core.VW.Ecma2015.Utils.module(require('./compare'));
var $mod$170 = core.VW.Ecma2015.Utils.module(require('./diff'));
var $mod$171 = core.VW.Ecma2015.Utils.module(require('./format'));
var $mod$172 = core.VW.Ecma2015.Utils.module(require('./from'));
var $mod$173 = core.VW.Ecma2015.Utils.module(require('./to'));
var $mod$174 = core.VW.Ecma2015.Utils.module(require('./get-set'));
var $mod$175 = core.VW.Ecma2015.Utils.module(require('./locale'));
var $mod$176 = core.VW.Ecma2015.Utils.module(require('./min-max'));
var $mod$177 = core.VW.Ecma2015.Utils.module(require('./start-end-of'));
var $mod$178 = core.VW.Ecma2015.Utils.module(require('./to-type'));
var $mod$179 = core.VW.Ecma2015.Utils.module(require('./valid'));
var $mod$180 = core.VW.Ecma2015.Utils.module(require('./creation-data'));
proto.add = $mod$166.add;
proto.calendar = $mod$167.calendar;
proto.clone = $mod$168.clone;
proto.diff = $mod$170.diff;
proto.endOf = $mod$177.endOf;
proto.format = $mod$171.format;
proto.from = $mod$172.from;
proto.fromNow = $mod$172.fromNow;
proto.to = $mod$173.to;
proto.toNow = $mod$173.toNow;
proto.get = $mod$174.getSet;
proto.invalidAt = $mod$179.invalidAt;
proto.isAfter = $mod$169.isAfter;
proto.isBefore = $mod$169.isBefore;
proto.isBetween = $mod$169.isBetween;
proto.isSame = $mod$169.isSame;
proto.isSameOrAfter = $mod$169.isSameOrAfter;
proto.isSameOrBefore = $mod$169.isSameOrBefore;
proto.isValid = $mod$179.isValid;
proto.lang = $mod$175.lang;
proto.locale = $mod$175.locale;
proto.localeData = $mod$175.localeData;
proto.max = $mod$176.prototypeMax;
proto.min = $mod$176.prototypeMin;
proto.parsingFlags = $mod$179.parsingFlags;
proto.set = $mod$174.getSet;
proto.startOf = $mod$177.startOf;
proto.subtract = $mod$166.subtract;
proto.toArray = $mod$178.toArray;
proto.toObject = $mod$178.toObject;
proto.toDate = $mod$178.toDate;
proto.toISOString = $mod$171.toISOString;
proto.toJSON = $mod$178.toJSON;
proto.toString = $mod$171.toString;
proto.unix = $mod$178.unix;
proto.valueOf = $mod$178.valueOf;
proto.creationData = $mod$180.creationData;
var $mod$181 = core.VW.Ecma2015.Utils.module(require('../units/year'));
proto.year = $mod$181.getSetYear;
proto.isLeapYear = $mod$181.getIsLeapYear;
var $mod$182 = core.VW.Ecma2015.Utils.module(require('../units/week-year'));
proto.weekYear = $mod$182.getSetWeekYear;
proto.isoWeekYear = $mod$182.getSetISOWeekYear;
var $mod$183 = core.VW.Ecma2015.Utils.module(require('../units/quarter'));
proto.quarter = proto.quarters = $mod$183.getSetQuarter;
var $mod$184 = core.VW.Ecma2015.Utils.module(require('../units/month'));
proto.month = $mod$184.getSetMonth;
proto.daysInMonth = $mod$184.getDaysInMonth;
var $mod$185 = core.VW.Ecma2015.Utils.module(require('../units/week'));
proto.week = proto.weeks = $mod$185.getSetWeek;
proto.isoWeek = proto.isoWeeks = $mod$185.getSetISOWeek;
proto.weeksInYear = $mod$182.getWeeksInYear;
proto.isoWeeksInYear = $mod$182.getISOWeeksInYear;
var $mod$186 = core.VW.Ecma2015.Utils.module(require('../units/day-of-month'));
var $mod$187 = core.VW.Ecma2015.Utils.module(require('../units/day-of-week'));
var $mod$188 = core.VW.Ecma2015.Utils.module(require('../units/day-of-year'));
proto.date = $mod$186.getSetDayOfMonth;
proto.day = proto.days = $mod$187.getSetDayOfWeek;
proto.weekday = $mod$187.getSetLocaleDayOfWeek;
proto.isoWeekday = $mod$187.getSetISODayOfWeek;
proto.dayOfYear = $mod$188.getSetDayOfYear;
var $mod$189 = core.VW.Ecma2015.Utils.module(require('../units/hour'));
proto.hour = proto.hours = $mod$189.getSetHour;
var $mod$190 = core.VW.Ecma2015.Utils.module(require('../units/minute'));
proto.minute = proto.minutes = $mod$190.getSetMinute;
var $mod$191 = core.VW.Ecma2015.Utils.module(require('../units/second'));
proto.second = proto.seconds = $mod$191.getSetSecond;
var $mod$192 = core.VW.Ecma2015.Utils.module(require('../units/millisecond'));
proto.millisecond = proto.milliseconds = $mod$192.getSetMillisecond;
var $mod$193 = core.VW.Ecma2015.Utils.module(require('../units/offset'));
proto.utcOffset = $mod$193.getSetOffset;
proto.utc = $mod$193.setOffsetToUTC;
proto.local = $mod$193.setOffsetToLocal;
proto.parseZone = $mod$193.setOffsetToParsedOffset;
proto.hasAlignedHourOffset = $mod$193.hasAlignedHourOffset;
proto.isDST = $mod$193.isDaylightSavingTime;
proto.isDSTShifted = $mod$193.isDaylightSavingTimeShifted;
proto.isLocal = $mod$193.isLocal;
proto.isUtcOffset = $mod$193.isUtcOffset;
proto.isUtc = $mod$193.isUtc;
proto.isUTC = $mod$193.isUtc;
var $mod$194 = core.VW.Ecma2015.Utils.module(require('../units/timezone'));
proto.zoneAbbr = $mod$194.getZoneAbbr;
proto.zoneName = $mod$194.getZoneName;
var $mod$195 = core.VW.Ecma2015.Utils.module(require('../utils/deprecate'));
proto.dates = $mod$195.deprecate('dates accessor is deprecated. Use date instead.', $mod$186.getSetDayOfMonth);
proto.months = $mod$195.deprecate('months accessor is deprecated. Use month instead', $mod$184.getSetMonth);
proto.years = $mod$195.deprecate('years accessor is deprecated. Use year instead', $mod$181.getSetYear);
proto.zone = $mod$195.deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', $mod$193.getSetZone);
exports.default = proto;